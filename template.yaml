AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Rust Lambda Authorizer

Globals:
  Function:
    Timeout: 3
    Handler: bootstrap.is.the.handler
    Runtime: provided.al2
    Architectures:
      - arm64

Resources:
  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: Prod
      Auth:
        DefaultAuthorizer: MyLambdaRequestAuthorizer
        Authorizers:
          MyLambdaRequestAuthorizer:
            FunctionArn: !GetAtt AuthFn.Arn
            FunctionInvokeRole: !GetAtt ExecAuthRole.Arn
            Identity:
              Headers:
                - Authorization
            AuthorizerPayloadFormatVersion: 2.0
            EnableSimpleResponses: true

  ExecAuthRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: ExecuteAuthFn
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource: !GetAtt AuthFn.Arn

  Table:
    Type: AWS::Serverless::SimpleTable # More info about SimpleTable Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-simpletable.html
    Properties:
      PrimaryKey:
        Name: id
        Type: String

  AuthFn:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: target/lambda/auth_fn/
      Environment:
        Variables:
          TABLE_NAME: !Ref Table
      Policies:
        - DynamoDBWritePolicy: # More info about SAM policy templates: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-templates.html
            TableName: !Ref Table

  PutFn:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: target/lambda/put_fn/
      Events:
        HelloWorld:
          Type: HttpApi # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            ApiId: !Ref HttpApi
            Path: /{id}
            Method: put
            # Auth:
            #   Authorizer: NONE
            PayloadFormatVersion: "2.0"
      Environment:
        Variables:
          TABLE_NAME: !Ref Table
      Policies:
        - DynamoDBWritePolicy: # More info about SAM policy templates: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-templates.html
            TableName: !Ref Table

Outputs:
  Api:
    Description: "API Gateway endpoint URL for Prod stage for Put function"
    Value: !Sub "https://${HttpApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/Prod/"
  AuthFn:
    Description: "Put Lambda Function ARN"
    Value: !GetAtt AuthFn.Arn
  PutFn:
    Description: "Put Lambda Function ARN"
    Value: !GetAtt PutFn.Arn
  PutTable:
    Description: "DynamoDB table name"
    Value: !GetAtt Table.Arn
